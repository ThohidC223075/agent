import os
import subprocess
import time

# ‚úÖ ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® Git ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ö‡¶æ‡¶≤‡¶æ‡ßü ‡¶è‡¶¨‡¶Ç ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá
def run_git_command(command):
    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if result.returncode != 0:
        print(f"‚ùå Error running {' '.join(command)}")
        print(result.stderr)
    else:
        print(result.stdout.strip())
    return result

# ‚úÖ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá .git ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ
def is_git_repo(path):
    return os.path.exists(os.path.join(path, '.git'))

# ‚úÖ ‡¶∞‡¶ø‡¶Æ‡ßã‡¶ü ‡¶∞‡¶ø‡¶™‡ßã‡¶ú‡¶ø‡¶ü‡¶∞‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶è‡¶∏‡ßá‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ ‡¶§‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç pull ‡¶ï‡¶∞‡ßá
def pull_if_needed():
    fetch_result = run_git_command(['git', 'fetch'])
    status_result = run_git_command(['git', 'status'])

    if "Your branch is behind" in status_result.stdout:
        print("üîÑ Remote repo has updates. Pulling...")
        run_git_command(['git', 'pull', 'origin', 'main'])
    else:
        print("‚úÖ Local repo is up to date.")

# ‚úÖ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶ö‡ßá‡¶û‡ßç‡¶ú ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ ‡¶§‡¶æ ‡¶¶‡ßá‡¶ñ‡ßá commit ‡¶ï‡¶∞‡ßá
def push_if_changed(commit_msg):
    status = run_git_command(['git', 'status', '--porcelain'])
    if status.stdout.strip() != "":
        print("üì¶ Changes found. Committing and pushing...")
        run_git_command(['git', 'add', '.'])
        run_git_command(['git', 'commit', '-m', commit_msg])
        run_git_command(['git', 'push', 'origin', 'main'])
    else:
        print("‚úÖ No changes to commit.")

# ‚úÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡¶ø‡¶™‡ßã ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã
def initialize_and_push(path, remote_url, commit_msg):
    os.chdir(path)
    run_git_command(['git', 'init'])
    run_git_command(['git', 'add', '.'])
    run_git_command(['git', 'commit', '-m', commit_msg])
    run_git_command(['git', 'branch', '-M', 'main'])
    run_git_command(['git', 'remote', 'add', 'origin', remote_url])
    run_git_command(['git', 'push', '-u', 'origin', 'main'])

# ‚úÖ ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def main():
    path = os.getcwd()
    os.chdir(path)

    if is_git_repo(path):
        print("üìÅ This is already a Git repository.")
        while True:
            pull_if_needed()  # ‡¶∞‡¶ø‡¶Æ‡ßã‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡¶≤‡ßá pull
            commit_msg = input("‚úçÔ∏è Enter commit message (or press enter to skip): ").strip()
            if commit_msg:
                push_if_changed(commit_msg)
            time.sleep(0)  # ‡ßß‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞‡¶™‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá
    else:
        print("‚ö†Ô∏è No Git repository found.")
        remote_url = input("üîó Enter your remote Git repository URL: ").strip()
        commit_msg = input("‚úçÔ∏è Enter initial commit message: ").strip()
        initialize_and_push(path, remote_url, commit_msg)
        print("‚úÖ Repository initialized and code pushed.")

if __name__ == "__main__":
    main()
